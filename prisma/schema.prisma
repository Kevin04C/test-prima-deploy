generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model areas {
  id        Int        @id(map: "PK_areas") @default(autoincrement())
  name      String     @db.VarChar(100)
  status_id Int
  status    status     @relation(fields: [status_id], references: [id], onUpdate: NoAction, map: "FK_areas_status1")
  products  products[]
}

model pdfs {
  sales_id Int    @id(map: "PK_pdfs")
  url      String @db.VarChar(255)
  sales    sales  @relation(fields: [sales_id], references: [id], onUpdate: NoAction, map: "FK_pdfs_sales")
}

model products {
  id               String          @id(map: "PK_productos") @db.VarChar(20)
  name             String          @db.VarChar(255)
  price            Decimal         @db.Decimal(18, 2)
  stock            Int
  area_id          Int
  status_id        Int
  products_type_id Int
  areas            areas           @relation(fields: [area_id], references: [id], onUpdate: NoAction, map: "FK_products_areas")
  products_types   products_types  @relation(fields: [products_type_id], references: [id], onUpdate: NoAction, map: "FK_products_products_types")
  status           status          @relation(fields: [status_id], references: [id], onUpdate: NoAction, map: "FK_products_status")
  sales_details    sales_details[]
}

model products_types {
  id       Int        @id(map: "PK_productos_tipo") @default(autoincrement())
  type     String     @db.VarChar(100)
  products products[]
}

model sales {
  id            Int             @id(map: "PK_ventas") @default(autoincrement())
  date          DateTime?       @default(now(), map: "DF_sales_date") @db.DateTime
  users_id      Int
  customer      String          @default("CLIENTE", map: "DF_ventas_cliente") @db.VarChar(200)
  dni           String          @default("0", map: "DF_ventas_dni") @db.Char(8)
  pdfs          pdfs?
  users         users           @relation(fields: [users_id], references: [id], onUpdate: NoAction, map: "FK_ventas_usuarios")
  sales_details sales_details[]
}

model sales_details {
  id          Int      @id(map: "PK_venta_detalles") @default(autoincrement())
  producto_id String   @db.VarChar(20)
  sales_id    Int
  quantity    Int
  products    products @relation(fields: [producto_id], references: [id], onDelete: Cascade, map: "FK_venta_detalles_productos")
  sales       sales    @relation(fields: [sales_id], references: [id], onDelete: Cascade, map: "FK_venta_detalles_ventas")
}

model security {
  token   Bytes? @db.VarBinary(255)
  user_id Int    @id(map: "PK_security_1")
  users   users  @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "FK_security_users")
}

model status {
  id       Int        @id(map: "PK_status")
  active   Boolean    @default(true, map: "DF_areas_estado_activo")
  areas    areas[]
  products products[]
}

model users {
  id       Int       @id(map: "PK_usuarios") @default(autoincrement())
  username String    @db.VarChar(50)
  email    String    @db.VarChar(255)
  password String    @db.VarChar(255)
  sales    sales[]
  security security?
}
